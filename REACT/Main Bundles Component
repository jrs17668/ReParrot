import React, { useEffect, useState } from "react";
import { useNavigate } from "react-router-dom";
import PropTypes from "prop-types";
import packageService from "services/packageService";
import Package from "./Package";
import PackageViewMore from "./PackageViewMore";
import { Formik, Form, Field } from "formik";
import Pagination from "rc-pagination";
import "rc-pagination/assets/index.css";
import locale from "rc-pagination/lib/locale/en_US";
import logger from "sabio-debug";
import toastr from "toastr";
import { Col, Row, Card, Tab, Nav, Container, Button } from "react-bootstrap";

const _logger = logger.extend("Packages");

function Packages(props) {
  const currentUser = props.currentUser;

  const navigate = useNavigate();

  const [pageData, setPageData] = useState({
    arrayOfPackages: [],
    packageComponents: [],
  });

  const [paginate, setPaginate] = useState({
    index: 0,
    total: 0,
    pageSize: 5,
    orgId: currentUser.organizationId,
    query: "",
  });

  useEffect(() => {
    if (props.currentUser.roles.includes("OrgAdmin")) {
      if (paginate.query?.length > 0) {
        packageService
          .getByOrgIdSearchPag(
            paginate.index,
            paginate.pageSize,
            paginate.orgId,
            paginate.query
          )
          .then(onGetPackagesSuccess)
          .catch(onGetPackagesError);
      } else if (!paginate.query) {
        packageService
          .getByOrgIdPag(paginate.index, paginate.pageSize, paginate.orgId)
          .then(onGetPackagesSuccess)
          .catch(onGetPackagesError);
      }
    } else {
      if (paginate.query?.length > 0) {
        packageService
          .getAllSearchPag(paginate.index, paginate.pageSize, paginate.query)
          .then(onGetPackagesSuccess)
          .catch(onGetPackagesError);
      } else if (!paginate.query) {
        packageService
          .getAllPag(paginate.index, paginate.pageSize)
          .then(onGetPackagesSuccess)
          .catch(onGetPackagesError);
      }
    }
  }, [paginate.index, paginate.query]);

  const onGetPackagesSuccess = (response) => {
    var packageArray = response.item.pagedItems;

    setPageData((prevState) => {
      const pageData = { ...prevState };
      pageData.arrayOfPackages = packageArray;
      pageData.packageComponents = packageArray.map(mapPackage);
      return pageData;
    });

    setPaginate((prevState) => {
      const newPageData = { ...prevState };
      newPageData.pageSize = response.item.pageSize;
      newPageData.pageIndex = response.item.pageIndex;
      newPageData.total = response.item.totalCount;
      return newPageData;
    });
  };

  const onGetPackagesError = (error) => {
    _logger("Get Packages Error...", error);
    toastr.error("No Results Found", "Search Failed");
  };

  const onPageChange = (page) => {
    if (props.currentUser.roles.includes("OrgAdmin")) {
      packageService
        .getByOrgIdPag(page - 1, paginate.pageSize, paginate.orgId)
        .then(onGetPackagesSuccess)
        .catch(onGetPackagesError);
    } else {
      packageService
        .getAllPag(page - 1, paginate.pageSize)
        .then(onGetPackagesSuccess)
        .catch(onGetPackagesError);
    }
  };

  const onGetPackageDetail = (autoPackage, eObj) => {
    _logger(autoPackage, eObj);
    <PackageViewMore autoPackage={autoPackage} currentUser={currentUser} />;
  };

  const mapPackage = (aPackage) => {
    return (
      <Package
        package={aPackage}
        key={"Package" + aPackage.id}
        onLocalClicked={onGetPackageDetail}
        currentUser={currentUser}
      />
    );
  };

  const onSearchSubmit = (value) => {
    setPaginate((prevState) => {
      const updatedPage = { ...prevState };

      updatedPage.index = 0;
      updatedPage.pageSize = value.pageSize;
      updatedPage.query = value.query;
      updatedPage.total = value.total;
      return updatedPage;
    });
  };

  const onNavigateToAddForm = () => {
    navigate(`/packages/add`);
  };

  return (
    <React.Fragment>
      <div>
        <div className="bg-services">
          <Container className="pb-2">
            <Row className="center-autoservices">
              <Col xl={8} lg={8} md={12} sm={12}>
                <div>
                  <h1 className="title-autoservices">
                    Getting started with Bundles
                  </h1>
                  <p className="desc-services">
                    Browse through an organizations bundled services. See what
                    Services are included in each bundle!
                  </p>
                </div>
              </Col>
            </Row>
            <Row className="center-autoservices">
              <Col xl={8} lg={8} md={12} sm={12}>
                <div className="mt-4 mb-4">
                  <Formik
                    enableReinitialize={true}
                    initialValues={paginate}
                    onSubmit={onSearchSubmit}
                  >
                    <Form>
                      <Field
                        type="search"
                        className="form-control form-control-sm"
                        id="query"
                        name="query"
                        placeholder="Search Bundles"
                      />
                    </Form>
                  </Formik>
                </div>
                {props.currentUser.roles.includes("OrgAdmin") && (
                  <Button
                    className="btn-success text-right"
                    size="sm"
                    type="submit"
                    onClick={onNavigateToAddForm}
                  >
                    Add Bundle
                  </Button>
                )}
              </Col>
            </Row>
          </Container>
        </div>
        <Container>
          <Row className="center-autoservices">
            <Col xl={8} lg={8} md={12} sm={12} className="mt-n8 mb-4 mb-lg-12">
              <Tab.Container defaultActiveKey="packages">
                <Card>
                  <Card.Header className="border-bottom-0 p-0 bg-white">
                    <Nav className="nav-lb-tab">
                      <Nav.Item>
                        <Nav.Link
                          eventKey="packages"
                          className="mb-sm-3 mb-md-0"
                        >
                          Bundles
                        </Nav.Link>
                      </Nav.Item>
                    </Nav>
                  </Card.Header>
                  <Card.Body className="p-0">
                    <Tab.Content>
                      <Tab.Pane eventKey="packages" className="pb-4 p-4">
                        <div className="row">{pageData.packageComponents}</div>
                      </Tab.Pane>
                    </Tab.Content>
                  </Card.Body>
                  <Container className="bg-white">
                    <Row>
                      <Col>
                        <Pagination
                          onChange={onPageChange}
                          index={paginate.index}
                          total={paginate.total}
                          pageSize={paginate.pageSize}
                          locale={locale}
                          className="text-center mt-2 mb-6"
                        />
                      </Col>
                    </Row>
                  </Container>
                </Card>
              </Tab.Container>
            </Col>
          </Row>
        </Container>
      </div>
    </React.Fragment>
  );
}

Packages.propTypes = {
  currentUser: PropTypes.shape({
    id: PropTypes.number.isRequired,
    email: PropTypes.string.isRequired,
    isLoggedIn: PropTypes.bool.isRequired,
    organizationId: PropTypes.number.isRequired,
    roles: PropTypes.shape({
      0: PropTypes.string.isRequired,
      1: PropTypes.string,
      includes: PropTypes.func,
    }),
  }),
};

export default Packages;
